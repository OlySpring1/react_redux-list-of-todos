{"version":3,"sources":["store/index.ts","components/helpers/api.ts","components/TodoCard.tsx","components/TodoList.tsx","components/Loading.tsx","components/ButtonsSort.tsx","App.tsx","index.tsx"],"names":["getIsLoading","state","isLoading","getFinishLoading","loaded","getError","hasError","getVisibleTodos","visibleTodos","todos","sortField","sortReverse","sort","a","b","completed","title","localeCompare","userId","name","initialState","store","createStore","action","type","composeWithDevTools","getTodos","fetch","response","json","dataTodos","getUsers","dataUsers","getPrepareTodos","Promise","all","users","prepareTodos","map","todo","find","user","id","TodoCard","className","classNames","TodoList","key","Loading","buttonsSort","ButtonsSort","dispatch","useDispatch","item","onClick","e","target","hendleOnClick","App","useSelector","useState","isToggle","setIsToggle","loadTodos","then","todosFromServe","handleSuccess","catch","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.28c54088.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst HANDLE_SUCCESS = 'HANDLE_SUCCESS';\nconst HANDLE_ERROR = 'HANDLE_ERROR';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst SORT_BY = 'SORT_BY';\n\nexport const BY_TITLE = 'title';\nexport const BY_NAME = 'name';\nexport const BY_COMPLETED = 'completed';\n\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\nexport const handleSuccess = (todos: PrepareTodo[]) => ({\n  type: HANDLE_SUCCESS,\n  todos,\n});\nexport const handleError = () => ({\n  type: HANDLE_ERROR,\n});\nexport const setSortField = (sortField: string) => ({\n  type: SORT_BY,\n  sortField,\n});\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const getIsLoading = (state: RootState) => state.isLoading;\nexport const getFinishLoading = (state: RootState) => state.loaded;\nexport const getError = (state: RootState) => state.hasError;\nexport const getTodos = (state: RootState) => state.todos;\nexport const getSortField = (state: RootState) => state.sortField;\nexport const getVisibleTodos = (state: RootState) => {\n  const visibleTodos = [...state.todos];\n\n  switch (state.sortField) {\n    case BY_COMPLETED:\n      return state.sortReverse\n        ? visibleTodos.sort((a: PrepareTodo, b: PrepareTodo) => +a.completed - +b.completed)\n        : visibleTodos.sort((a: PrepareTodo, b: PrepareTodo) => +b.completed - +a.completed);\n      break;\n\n    case BY_TITLE:\n      return state.sortReverse\n        ? visibleTodos.sort(\n          (a: PrepareTodo, b: PrepareTodo) => a.title.localeCompare(b.title),\n        )\n        : visibleTodos.sort((a: PrepareTodo, b: PrepareTodo) => b.title.localeCompare(a.title));\n      break;\n\n    case BY_NAME:\n      return state.sortReverse\n        ? visibleTodos.sort(\n          (a: PrepareTodo, b: PrepareTodo) => a.userId.name.localeCompare(b.userId.name),\n        )\n        : visibleTodos.sort(\n          (a: PrepareTodo, b: PrepareTodo) => b.userId.name.localeCompare(a.userId.name),\n        );\n      break;\n\n    default:\n      return visibleTodos;\n  }\n\n  return visibleTodos;\n};\n\n// Initial state\nexport type RootState = {\n  isLoading: boolean;\n  hasError: boolean;\n  loaded: boolean;\n  todos: PrepareTodo[];\n  sortField: string;\n  sortReverse: boolean;\n};\n\nconst initialState: RootState = {\n  isLoading: false,\n  hasError: false,\n  loaded: false,\n  todos: [],\n  sortField: '',\n  sortReverse: false,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n        hasError: false,\n      };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        isLoading: false,\n        hasError: false,\n        loaded: true,\n      };\n\n    case HANDLE_SUCCESS:\n      return {\n        ...state,\n        todos: action.todos,\n        isLoading: false,\n      };\n\n    case HANDLE_ERROR:\n      return {\n        ...state,\n        isLoading: false,\n        hasError: true,\n      };\n\n    case SORT_BY:\n      return {\n        ...state,\n        sortField: action.sortField,\n        sortReverse: !state.sortReverse,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","const API_URL_TODOS = 'https://jsonplaceholder.typicode.com/todos';\nconst API_URL_USER = 'https://jsonplaceholder.typicode.com/users';\n\nexport const getTodos = async () => {\n  const response = await fetch(API_URL_TODOS);\n  const dataTodos = await response.json();\n\n  return dataTodos;\n};\n\nexport const getUsers = async () => {\n  const response = await fetch(API_URL_USER);\n  const dataUsers = await response.json();\n\n  return dataUsers;\n};\n\nexport const getPrepareTodos = async () => {\n  const [todos, users] = await Promise.all([getTodos(), getUsers()]);\n\n  const prepareTodos = todos.map((todo: Todo) => ({\n    ...todo,\n    userId: { ...users.find((user: User) => user.id === todo.userId) },\n  }));\n\n  return prepareTodos;\n};\n","import React from 'react';\nimport classNames from 'classnames/bind';\n\ntype Props = {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: User;\n};\n\nconst TodoCard: React.FC<Props> = ({\n  id, title, completed, userId,\n}) => {\n  return (\n    <tr className={\n      classNames({ 'has-background-success': !completed },\n        { 'has-background-info': completed })\n    }\n    >\n      <th>{id}</th>\n      <td>{title}</td>\n      <td>{completed ? 'completed' : 'active'}</td>\n      <td>{userId.name}</td>\n    </tr>\n  );\n};\n\n\nexport default TodoCard;\n","import React from 'react';\nimport TodoCard from './TodoCard';\n\ntype Props = {\n  todos: PrepareTodo[];\n};\n\nconst TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <>\n      {todos.map((todo: PrepareTodo) => (\n        <TodoCard key={todo.id} {...todo} />\n      ))}\n    </>\n  );\n};\n\nexport default TodoList;\n","import React from 'react';\nimport classNames from 'classnames/bind';\n\ntype Props = {\n  loaded: boolean;\n};\n\nconst Loading: React.FC<Props> = ({ loaded }) => (\n  <div className={classNames({ 'lds-roller': !loaded }, { 'has-background-success': loaded })}>\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n);\n\nexport default Loading;\n","import React, { MouseEvent } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setSortField } from '../store';\n\nconst buttonsSort = ['id', 'title', 'completed', 'name'];\n\nconst ButtonsSort: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const hendleOnClick = (e: MouseEvent<HTMLButtonElement>) => {\n    const { name } = (e.target as HTMLButtonElement);\n\n    dispatch(setSortField(name));\n  };\n\n  return (\n    <tr>\n      {buttonsSort.map(item => (\n        <th>\n          <button\n            type=\"button\"\n            name={item}\n            className=\"btnSort\"\n            onClick={e => hendleOnClick(e)}\n          >\n            By\n            {' '}\n            {item}\n          </button>\n        </th>\n      ))}\n    </tr>\n  );\n};\n\nexport default ButtonsSort;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPrepareTodos } from './components/helpers/api';\nimport './App.scss';\nimport TodoList from './components/TodoList';\nimport Loading from './components/Loading';\nimport ButtonsSort from './components/ButtonsSort';\n\nimport {\n  startLoading,\n  finishLoading,\n  handleSuccess,\n  handleError,\n  getIsLoading,\n  getFinishLoading,\n  getError,\n  getVisibleTodos,\n} from './store';\n\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  const hasError = useSelector(getError);\n  const isLoading = useSelector(getIsLoading);\n  const todos = useSelector(getVisibleTodos);\n  const loaded = useSelector(getFinishLoading);\n  const [isToggle, setIsToggle] = useState(false);\n\n  const loadTodos = () => {\n    setIsToggle(!isToggle);\n    dispatch(startLoading());\n\n    getPrepareTodos()\n      .then(todosFromServe => {\n        dispatch(finishLoading());\n        dispatch(handleSuccess(todosFromServe));\n      })\n      .catch(() => {\n        dispatch(handleError());\n      });\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title is-1\">Redux list of todos</h1>\n\n      {(!isToggle && !hasError) && (\n        <button\n          type=\"button\"\n          className=\"button is-primary is-medium\"\n          onClick={loadTodos}\n        >\n          Load\n        </button>\n      )}\n\n      {isLoading && (\n        <Loading loaded={loaded} />\n      )}\n\n      {hasError && (\n        <>\n          <p>Error occurred!!!</p>\n          <button\n            type=\"button\"\n            className=\"button is-primary is-medium\"\n            onClick={loadTodos}\n          >\n            Try again\n          </button>\n        </>\n      )}\n      {loaded && (\n        <div className=\"bd-snippet-preview \">\n          <table className=\"table is-striped is-hoverable\">\n            <thead className=\"has-background-grey-lighter\">\n              <ButtonsSort />\n            </thead>\n            <tfoot className=\"has-background-grey-lighter\" />\n            <tbody>\n              <TodoList todos={todos} />\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}